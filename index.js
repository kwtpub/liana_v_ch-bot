const fs = require('fs');
const path = require('path');
const bot = require('./bot');

// ID –∫–∞–Ω–∞–ª–∞
const CHANNEL_ID = -1002397816296;

// ID –∞–¥–º–∏–Ω-—á–∞—Ç–∞
const ADMIN_CHAT_ID = -1002368236633;

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
const SUBSCRIPTIONS_FILE = path.join(__dirname, 'data', 'subscriptions.json');

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π
const userMessages = {};

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
function loadSubscriptions() {
    if (!fs.existsSync(SUBSCRIPTIONS_FILE)) {
        fs.writeFileSync(SUBSCRIPTIONS_FILE, JSON.stringify([]));
    }
    return JSON.parse(fs.readFileSync(SUBSCRIPTIONS_FILE, 'utf8'));
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
function saveSubscriptions(subscriptions) {
    fs.writeFileSync(SUBSCRIPTIONS_FILE, JSON.stringify(subscriptions, null, 2));
}

// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
function addSubscription(userId, expiresAt, firstName) {
    const subscriptions = loadSubscriptions();
    const existingSubscription = subscriptions.find(sub => sub.userId === userId);

    if (existingSubscription) {
        // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë —Å—Ä–æ–∫
        existingSubscription.expiresAt = expiresAt;
        existingSubscription.firstName = firstName;
    } else {
        // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        subscriptions.push({ userId, expiresAt, firstName });
    }

    saveSubscriptions(subscriptions);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
function checkSubscription(userId) {
    const subscriptions = loadSubscriptions();
    const userSubscription = subscriptions.find(sub => sub.userId === userId);
    return userSubscription && new Date(userSubscription.expiresAt) > new Date();
}

// –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
function removeSubscription(userId) {
    const subscriptions = loadSubscriptions();
    const updatedSubscriptions = subscriptions.filter(sub => sub.userId !== userId);
    saveSubscriptions(updatedSubscriptions);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞
async function isUserInChannel(userId) {
    try {
        const chatMember = await bot.getChatMember(CHANNEL_ID, userId);
        return ['member', 'administrator', 'creator'].includes(chatMember.status);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–∞–Ω–∞–ª–∞:', error);
        return false;
    }
}

// –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
function getSubscriptionExpiresAt(userId) {
    const subscriptions = loadSubscriptions();
    const userSubscription = subscriptions.find(sub => sub.userId === userId);
    return userSubscription ? new Date(userSubscription.expiresAt) : null;
}

// –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞
async function removeUserFromChannel(userId) {
    try {
        await bot.banChatMember(CHANNEL_ID, userId);
        await bot.unbanChatMember(CHANNEL_ID, userId);
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞.`);
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function checkSubscriptions() {
    const subscriptions = loadSubscriptions();
    const now = new Date();

    for (const sub of subscriptions) {
        const expiresAt = new Date(sub.expiresAt);
        const timeLeft = expiresAt - now; // –í—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

        // –ï—Å–ª–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å 2 –¥–Ω—è –∏–ª–∏ –º–µ–Ω—å—à–µ
        if (timeLeft <= 2 * 24 * 60 * 60 * 1000 && timeLeft > 0) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
            bot.sendMessage(sub.userId, `üîî –í–Ω–∏–º–∞–Ω–∏–µ!

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ ${Math.ceil(timeLeft / (24 * 60 * 60 * 1000))} –¥–Ω–µ–π.

–ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É! üî•üí´`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'renew_subscription' },
                        ]
                    ]
                }
            });
        }

        // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
        if (timeLeft <= 0) {
            // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            await removeUserFromChannel(sub.userId);

            // –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ JSON
            removeSubscription(sub.userId);
        }
    }
}

const commands = [

    {

        command: "start",
        description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"

    },
    {

        command: "info",
        description: "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"

    },

]

bot.setMyCommands(commands);


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
function getPriceByPeriod(period) {
    switch(period) {
        case 1:
            return '349 ‚ÇΩ';
        case 6:
            return '1599 ‚ÇΩ';
        case 12:
            return '2799 ‚ÇΩ';
        default:
            return '349 ‚ÇΩ';
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const firstName = msg.from.first_name;

    const messageText = `–ü—Ä–∏–≤–µ—Ç! 
–Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∏ –ø—Ä–æ–≤–µ–¥—É —Ç–µ–±—è –≤ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–∏–ª—å–Ω—ã–π –∫–ª—É–± üõçÔ∏è

–ü—Ä–æ–∏–∑–≤–µ–¥–∏ –æ–ø–ª–∞—Ç—É –Ω–∞ –∫–∞—Ä—Ç—É —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∏–∂–µ üëá`;

    // –û—á–∏—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    delete userMessages[userId];

    // –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.sendMessage(chatId, messageText, {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '1 –º–µ—Å—è—Ü - 349 ‚ÇΩ', callback_data: 'subscribe_1' },
                    { text: '6 –º–µ—Å—è—Ü–µ–≤ - 1599 ‚ÇΩ', callback_data: 'subscribe_6' },
                ],
                [
                    { text: '1 –≥–æ–¥ - 2799 ‚ÇΩ', callback_data: 'subscribe_12' },
                ]
            ]
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const userId = query.from.id;
    const data = query.data;

    console.log(`Callback query received: ${data}`);

    // –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–∞
    bot.answerCallbackQuery(query.id);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if (!userMessages[userId]) {
        userMessages[userId] = query.message.message_id;
    }

    if (data === 'sendLink') {
        const inviteLink = await bot.createChatInviteLink(-1002397816296, {
            member_limit: 1,
        });
        bot.sendMessage(chatId, inviteLink.invite_link);
    } else if (data === 'renew_subscription') {
        const messageText = `üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:`;
        
        bot.editMessageText(messageText, {
            chat_id: chatId,
            message_id: userMessages[userId],
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '1 –º–µ—Å—è—Ü - 349 ‚ÇΩ', callback_data: 'subscribe_1' },
                        { text: '6 –º–µ—Å—è—Ü–µ–≤ - 1599 ‚ÇΩ', callback_data: 'subscribe_6' },
                    ],
                    [
                        { text: '1 –≥–æ–¥ - 2799 ‚ÇΩ', callback_data: 'subscribe_12' },
                    ]
                ]
            }
        });
    } else if (data.startsWith('subscribe_')) {
        const period = parseInt(data.split('_')[1]);
        const price = getPriceByPeriod(period);
        const messageText = `‚ú® –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ ${period} –º–µ—Å—è—Ü–µ–≤‚ú®

üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${price}

üìå –û–ø–ª–∞—Ç–∞: –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É 4729 7578 6687 6777

üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω –≤ —á–∞—Ç –∏ –æ–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è`;

        bot.editMessageText(messageText, {
            chat_id: chatId,
            message_id: userMessages[userId],
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'renew_subscription' }
                    ]
                ]
            }
        });
    } else if (data.startsWith('approve_')) {
        const targetUserId = parseInt(data.split('_')[1]);
        const period = parseInt(data.split('_')[2]);

        try {
            const isMember = await isUserInChannel(targetUserId);
            const user = await bot.getChat(targetUserId);
            const firstName = user.first_name;

            if (isMember) {
                const expiresAt = new Date();
                expiresAt.setMonth(expiresAt.getMonth() + period);
                addSubscription(targetUserId, expiresAt.toISOString(), firstName);
                bot.sendMessage(targetUserId, `üéâ –ì–æ—Ç–æ–≤–æ!

–í—ã —É–∂–µ –≤ –∫–∞–Ω–∞–ª–µ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ ${period} –º–µ—Å—è—Ü–µ–≤. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º! üî•üí´`);
            } else {
                const inviteLink = await bot.createChatInviteLink(CHANNEL_ID, {
                    member_limit: 1,
                });
                const expiresAt = new Date();
                expiresAt.setMonth(expiresAt.getMonth() + period);
                addSubscription(targetUserId, expiresAt.toISOString(), firstName);
                bot.sendMessage(targetUserId, `üî• –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! üî•

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —Å—Ç–∏–ª—å–Ω—ã–π –∫–ª—É–±! üõçÔ∏è‚ú®

${inviteLink.invite_link}

–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å—é–¥–∞ @liana_v_ch`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
            bot.sendMessage(targetUserId, `‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚Ä¶
–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É. –ü—Ä–æ–≤–µ—Ä—å:
‚úîÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
‚úîÔ∏è –°—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞
‚úîÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω —á–µ–∫–∞

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ —Å—é–¥–∞ - @liana_v_ch`);
        }

        bot.deleteMessage(chatId, query.message.message_id);
    } else if (data.startsWith('reject_')) {
        const targetUserId = parseInt(data.split('_')[1]);
        bot.sendMessage(targetUserId, `‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚Ä¶
–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É. –ü—Ä–æ–≤–µ—Ä—å:
‚úîÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
‚úîÔ∏è –°—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞
‚úîÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω —á–µ–∫–∞

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ —Å—é–¥–∞ - @liana_v_ch`);
        bot.deleteMessage(chatId, query.message.message_id);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const firstName = msg.from.first_name;

    if (msg.photo) {
        const photoId = msg.photo[msg.photo.length - 1].file_id;

        bot.sendPhoto(ADMIN_CHAT_ID, photoId, {
            caption: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${firstName} (ID: ${userId}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:`,
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '1 –º–µ—Å—è—Ü', callback_data: `approve_${userId}_1` },
                        { text: '6 –º–µ—Å—è—Ü–µ–≤', callback_data: `approve_${userId}_6` },
                    ],
                    [
                        { text: '1 –≥–æ–¥', callback_data: `approve_${userId}_12` },
                        { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${userId}` },
                    ]
                ]
            }
        });

        const messageText = `üí≥ –°–ø–∞—Å–∏–±–æ!

–í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî —Å–∫–æ—Ä–æ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ! ‚è≥‚ú®`;

        if (userMessages[userId]) {
            bot.editMessageText(messageText, {
                chat_id: chatId,
                message_id: userMessages[userId]
            });
        } else {
            bot.sendMessage(chatId, messageText).then(sentMessage => {
                userMessages[userId] = sentMessage.message_id;
            });
        }
    }
});

// ... existing code ...